/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Telas.vendas;

import Controller.VendasService;
import Model.Cliente;
import Model.ClienteSingular;
import Model.ClienteEmpresa;
import Model.Usuario;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.regex.Pattern;

/**
 *
 * @author anicamassas
 */
public class TelaClientes extends javax.swing.JFrame {
    
    private Usuario usuarioLogado;
    private VendasService vendasService;
    private DefaultTableModel tableModel;

    /**
     * Creates new form TelaClientes
     */
    public TelaClientes(Usuario usuario, VendasService vendasService) {
        this.usuarioLogado = usuario;
        this.vendasService = vendasService;
        initComponents();
        atualizarInformacoesUsuario();
        configurarTabela();
        configurarBotaoProcurar();
        carregarClientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ClientesTb = new javax.swing.JTable();
        CadastrarClienteBtn = new javax.swing.JButton();
        GerenciarClienteBtn = new javax.swing.JButton();
        ProcurarClienteBtn = new javax.swing.JButton();
        VoltarBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setText("Sistema Online | Usuario: ");

        jLabel4.setText("Data:  | Hora: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(150, 150, 150))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        ClientesTb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nome", "Telefone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ClientesTb);
        if (ClientesTb.getColumnModel().getColumnCount() > 0) {
            ClientesTb.getColumnModel().getColumn(0).setResizable(false);
            ClientesTb.getColumnModel().getColumn(1).setResizable(false);
            ClientesTb.getColumnModel().getColumn(2).setResizable(false);
        }

        CadastrarClienteBtn.setText("Cadastrar Cliente");
        CadastrarClienteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CadastrarClienteBtnActionPerformed(evt);
            }
        });

        GerenciarClienteBtn.setText("Gerenciar Cliente");
        GerenciarClienteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GerenciarClienteBtnActionPerformed(evt);
            }
        });

        ProcurarClienteBtn.setText("Procurar Cliente");
        ProcurarClienteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcurarClienteBtnActionPerformed(evt);
            }
        });

        VoltarBtn.setText("Voltar");
        VoltarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VoltarBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Gestao de Clientes");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(VoltarBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ProcurarClienteBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CadastrarClienteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                            .addComponent(GerenciarClienteBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(jLabel2)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel2)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(ProcurarClienteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(CadastrarClienteBtn)
                        .addGap(39, 39, 39)
                        .addComponent(GerenciarClienteBtn)
                        .addGap(39, 39, 39)
                        .addComponent(VoltarBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(56, 56, 56)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CadastrarClienteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CadastrarClienteBtnActionPerformed
        cadastrarCliente();
    }//GEN-LAST:event_CadastrarClienteBtnActionPerformed

    private void GerenciarClienteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GerenciarClienteBtnActionPerformed
        gerenciarCliente();
    }//GEN-LAST:event_GerenciarClienteBtnActionPerformed

    private void VoltarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VoltarBtnActionPerformed
        TelaVendas telaVendas = new TelaVendas(usuarioLogado, vendasService, null);
        telaVendas.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_VoltarBtnActionPerformed

    private void ProcurarClienteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcurarClienteBtnActionPerformed
        procurarCliente();
    }//GEN-LAST:event_ProcurarClienteBtnActionPerformed
    
    private void cadastrarCliente() {
        String[] opcoes = {"Cliente Singular", "Cliente Empresa"};
        int tipo = JOptionPane.showOptionDialog(this, 
            "Selecione o tipo de cliente:", 
            "Tipo de Cliente",
            JOptionPane.DEFAULT_OPTION, 
            JOptionPane.QUESTION_MESSAGE, 
            null, opcoes, opcoes[0]);
        
        if (tipo == -1) return; // Cancelou
        
        javax.swing.JTextField nomeField = new javax.swing.JTextField();
        javax.swing.JTextField telefoneField = new javax.swing.JTextField();
        javax.swing.JTextField emailField = new javax.swing.JTextField();
        javax.swing.JTextField enderecoField = new javax.swing.JTextField();
        javax.swing.JTextField docField = new javax.swing.JTextField();
        
        String docLabel = tipo == 0 ? "BI/Passaporte:" : "NUIT:";
        
        javax.swing.JPanel panel = new javax.swing.JPanel(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
        
        gbc.gridx = 0; gbc.gridy = 0;
        panel.add(new javax.swing.JLabel("Nome:"), gbc);
        gbc.gridx = 1;
        panel.add(nomeField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        panel.add(new javax.swing.JLabel("Telefone:"), gbc);
        gbc.gridx = 1;
        panel.add(telefoneField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        panel.add(new javax.swing.JLabel("Email:"), gbc);
        gbc.gridx = 1;
        panel.add(emailField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        panel.add(new javax.swing.JLabel("Endereço:"), gbc);
        gbc.gridx = 1;
        panel.add(enderecoField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 4;
        panel.add(new javax.swing.JLabel(docLabel), gbc);
        gbc.gridx = 1;
        panel.add(docField, gbc);
        
        int option = JOptionPane.showConfirmDialog(this, panel, "Cadastrar Cliente", JOptionPane.OK_CANCEL_OPTION);
        
        if (option == JOptionPane.OK_OPTION) {
            String nome = nomeField.getText().trim();
            String telefone = telefoneField.getText().trim();
            String email = emailField.getText().trim();
            String endereco = enderecoField.getText().trim();
            String documento = docField.getText().trim();
            
            if (nome.isEmpty() || telefone.isEmpty() || email.isEmpty() || endereco.isEmpty() || documento.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Todos os campos são obrigatórios!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (!validarEmail(email)) {
                JOptionPane.showMessageDialog(this, "Email inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            Cliente cliente;
            if (tipo == 0) {
                cliente = new ClienteSingular(nome, telefone, email, endereco, documento);
            } else {
                cliente = new ClienteEmpresa(nome, telefone, email, endereco, documento);
            }
            
            if (vendasService.criar(cliente)) {
                vendasService.registrarAcaoCliente(cliente.getId(), "CADASTRO", usuarioLogado.getId(), 
                    "Cliente cadastrado: " + cliente.getNome());
                
                JOptionPane.showMessageDialog(this, "Cliente cadastrado com sucesso!\nID: " + cliente.getId());
                carregarClientes();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao cadastrar cliente!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void gerenciarCliente() {
        int selectedRow = ClientesTb.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um cliente na tabela!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String clienteId = (String) tableModel.getValueAt(selectedRow, 0);
        Cliente cliente = vendasService.buscar(clienteId);
        
        if (cliente == null) {
            JOptionPane.showMessageDialog(this, "Cliente não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String[] opcoes = {"Editar", "Excluir", "Cancelar"};
        int escolha = JOptionPane.showOptionDialog(this, 
            "O que deseja fazer com o cliente " + cliente.getNome() + "?", 
            "Gerenciar Cliente",
            JOptionPane.DEFAULT_OPTION, 
            JOptionPane.QUESTION_MESSAGE, 
            null, opcoes, opcoes[2]);
        
        if (escolha == 0) {
            editarCliente(cliente);
        } else if (escolha == 1) {
            excluirCliente(cliente);
        }
    }
    
    private void editarCliente(Cliente cliente) {
        javax.swing.JTextField nomeField = new javax.swing.JTextField(cliente.getNome());
        javax.swing.JTextField telefoneField = new javax.swing.JTextField(cliente.getTelefone());
        javax.swing.JTextField emailField = new javax.swing.JTextField(cliente.getEmail());
        javax.swing.JTextField enderecoField = new javax.swing.JTextField(cliente.getEndereco());
        
        javax.swing.JPanel panel = new javax.swing.JPanel(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
        
        gbc.gridx = 0; gbc.gridy = 0;
        panel.add(new javax.swing.JLabel("Nome:"), gbc);
        gbc.gridx = 1;
        panel.add(nomeField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        panel.add(new javax.swing.JLabel("Telefone:"), gbc);
        gbc.gridx = 1;
        panel.add(telefoneField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        panel.add(new javax.swing.JLabel("Email:"), gbc);
        gbc.gridx = 1;
        panel.add(emailField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        panel.add(new javax.swing.JLabel("Endereço:"), gbc);
        gbc.gridx = 1;
        panel.add(enderecoField, gbc);
        
        int option = JOptionPane.showConfirmDialog(this, panel, "Editar Cliente", JOptionPane.OK_CANCEL_OPTION);
        
        if (option == JOptionPane.OK_OPTION) {
            String nome = nomeField.getText().trim();
            String telefone = telefoneField.getText().trim();
            String email = emailField.getText().trim();
            String endereco = enderecoField.getText().trim();
            
            if (nome.isEmpty() || telefone.isEmpty() || email.isEmpty() || endereco.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Todos os campos são obrigatórios!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (!validarEmail(email)) {
                JOptionPane.showMessageDialog(this, "Email inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            cliente.setNome(nome);
            cliente.setTelefone(telefone);
            cliente.setEmail(email);
            cliente.setEndereco(endereco);
            
            if (vendasService.atualizar(cliente)) {
                vendasService.registrarAcaoCliente(cliente.getId(), "EDICAO", usuarioLogado.getId(), 
                    "Cliente editado: " + cliente.getNome());
                
                JOptionPane.showMessageDialog(this, "Cliente atualizado com sucesso!");
                carregarClientes();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao atualizar cliente!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void excluirCliente(Cliente cliente) {
        int confirmacao = JOptionPane.showConfirmDialog(this, 
            "Tem certeza que deseja excluir o cliente " + cliente.getNome() + "?", 
            "Confirmar Exclusão", 
            JOptionPane.YES_NO_OPTION);
        
        if (confirmacao == JOptionPane.YES_OPTION) {
            if (vendasService.excluir(cliente.getId())) {
                vendasService.registrarAcaoCliente(cliente.getId(), "EXCLUSAO", usuarioLogado.getId(), 
                    "Cliente excluído: " + cliente.getNome());
                
                JOptionPane.showMessageDialog(this, "Cliente excluído com sucesso!");
                carregarClientes();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao excluir cliente!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void procurarCliente() {
        String termo = jTextField1.getText().trim();
        
        if (termo.isEmpty()) {
            carregarClientes();
            return;
        }
        
        tableModel.setRowCount(0);
        
        // Search by ID or Name
        Cliente cliente = vendasService.buscarClientePorNomeOuId(termo);
        if (cliente != null && cliente.isAtivo()) {
            String tipoCliente = cliente.getTipoCliente() == Cliente.TipoCliente.SINGULAR ? 
                "Cliente Singular" : "Cliente Empresa";
            Object[] row = {
                cliente.getId(),
                cliente.getNome(),
                tipoCliente,
                cliente.getTelefone()
            };
            tableModel.addRow(row);
        } else {
            // Search by name (partial match)
            List<Cliente> clientes = vendasService.buscarClientesPorNome(termo);
            for (Cliente c : clientes) {
                if (c.isAtivo()) {
                    String tipoCliente = c.getTipoCliente() == Cliente.TipoCliente.SINGULAR ? 
                        "Cliente Singular" : "Cliente Empresa";
                    Object[] row = {
                        c.getId(),
                        c.getNome(),
                        tipoCliente,
                        c.getTelefone()
                    };
                    tableModel.addRow(row);
                }
            }
        }
        
        if (tableModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Nenhum cliente encontrado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            carregarClientes();
        }
    }
    
    private void configurarBotaoProcurar() {
        ProcurarClienteBtn.addActionListener(e -> procurarCliente());
    }
    
    private boolean validarEmail(String email) {
        String emailRegex = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$";
        Pattern pattern = Pattern.compile(emailRegex);
        return pattern.matcher(email).matches();
    }
    
    private void atualizarInformacoesUsuario() {
        jLabel1.setText("Sistema Online | Usuário: " + usuarioLogado.getNome() + " (" + usuarioLogado.getId() + ")");
    }
    
    private void configurarTabela() {
        String[] colunas = {"ID", "Nome", "Tipo de Cliente", "Número"};
        tableModel = new DefaultTableModel(colunas, 0) {
            @Override
            public boolean isCellEditable(int row, int columnIndex) {
                return false;
            }
        };
        ClientesTb.setModel(tableModel);
    }
    
    private void carregarClientes() {
        tableModel.setRowCount(0);
        List<Cliente> clientes = vendasService.listarTodos();
        for (Cliente cliente : clientes) {
            if (cliente.isAtivo()) {
                String tipoCliente = cliente.getTipoCliente() == Cliente.TipoCliente.SINGULAR ? 
                    "Cliente Singular" : "Cliente Empresa";
                Object[] row = {
                    cliente.getId(),
                    cliente.getNome(),
                    tipoCliente,
                    cliente.getTelefone()
                };
                tableModel.addRow(row);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CadastrarClienteBtn;
    private javax.swing.JTable ClientesTb;
    private javax.swing.JButton GerenciarClienteBtn;
    private javax.swing.JButton ProcurarClienteBtn;
    private javax.swing.JButton VoltarBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
