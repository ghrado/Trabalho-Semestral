/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Telas.vendas;

import Controller.StockService;
import Controller.VendasService;
import Model.Cliente;
import Model.ClienteEmpresa;
import Model.ClienteSingular;
import Model.ItemOrdem;
import Model.Ordem;
import Model.Produto;
import Model.Usuario;
import Util.PDFGenerator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author anicamassas
 */
public class TelaOrdem extends javax.swing.JFrame {
    
    private Usuario usuarioLogado;
    private VendasService vendasService;
    private StockService stockService;
    private DefaultTableModel tableModel;
    private List<ItemOrdem> itensOrdem;
    private Cliente clienteSelecionado;
    private Ordem ordemAtual;

    /**
     * Creates new form TelaOrdem
     */
    public TelaOrdem(Usuario usuario, VendasService vendasService, StockService stockService) {
        this.usuarioLogado = usuario;
        this.vendasService = vendasService;
        this.stockService = stockService;
        this.itensOrdem = new ArrayList<>();
        initComponents();
        atualizarInformacoesUsuario();
        configurarTabela();
        configurarBotoes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setText("Sistema Online | Usuario:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID Produto", "Nome produto", "Quantidade Produdo"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Buscar Ordem");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Gerar Cotacao");

        jButton3.setText("Gerar Ordem");

        jButton4.setText("Voltar");

        jLabel2.setText("Cliente:");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton5.setText("Buscar Cliente");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(jTextField2)))
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton5))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(61, 61, 61)
                        .addComponent(jButton3)
                        .addGap(46, 46, 46)
                        .addComponent(jButton4))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        buscarOrdem();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed
    
    private void configurarBotoes() {
        jButton5.addActionListener(e -> buscarCliente());
        
        // Gerar Cotação button
        jButton2.addActionListener(e -> gerarCotacao());
        
        // Gerar Ordem/Fatura button
        jButton3.addActionListener(e -> gerarFatura());
        
        // Voltar button
        jButton4.addActionListener(e -> {
            TelaVendas telaVendas = new TelaVendas(usuarioLogado, vendasService, stockService);
            telaVendas.setVisible(true);
            this.dispose();
        });
    }
    
    private void buscarCliente() {
        String termo = jTextField2.getText().trim();
        
        if (termo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Digite o BI, NUIT, Nome ou ID do cliente!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Search by ID or Name
        Cliente cliente = vendasService.buscarClientePorNomeOuId(termo);
        
        if (cliente != null) {
            clienteSelecionado = cliente;
            jTextField2.setText(cliente.getNome() + " (ID: " + cliente.getId() + ")");
            JOptionPane.showMessageDialog(this, 
                "Cliente encontrado!\n" +
                "ID: " + cliente.getId() + "\n" +
                "Nome: " + cliente.getNome() + "\n" +
                "Telefone: " + cliente.getTelefone() + "\n" +
                "Email: " + cliente.getEmail());
        } else {
            // If not found by ID/Name, search in all clients by BI/NUIT
            List<Cliente> todosClientes = vendasService.listarTodos();
            Cliente encontrado = null;
            
            for (Cliente c : todosClientes) {
                if (c.isAtivo()) {
                    // Check if it's ClienteSingular with BI or ClienteEmpresa with NUIT
                    String documento = "";
                    if (c instanceof Model.ClienteSingular) {
                        documento = ((Model.ClienteSingular) c).getBilheteIdentidade();
                    } else if (c instanceof Model.ClienteEmpresa) {
                        documento = ((Model.ClienteEmpresa) c).getNuit();
                    }
                    
                    if (documento != null && documento.equalsIgnoreCase(termo)) {
                        encontrado = c;
                        break;
                    }
                }
            }
            
            if (encontrado != null) {
                clienteSelecionado = encontrado;
                jTextField2.setText(encontrado.getNome() + " (ID: " + encontrado.getId() + ")");
                JOptionPane.showMessageDialog(this, 
                    "Cliente encontrado!\n" +
                    "ID: " + encontrado.getId() + "\n" +
                    "Nome: " + encontrado.getNome() + "\n" +
                    "Telefone: " + encontrado.getTelefone() + "\n" +
                    "Email: " + encontrado.getEmail());
            } else {
                JOptionPane.showMessageDialog(this, "Cliente não encontrado!", "Aviso", JOptionPane.WARNING_MESSAGE);
                clienteSelecionado = null;
            }
        }
    }
    
    private void gerarCotacao() {
        String codigo = jTextField1.getText().trim();
        
        if (codigo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Digite o código da ordem!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Ordem ordem = vendasService.buscarOrdem(codigo);
        
        if (ordem == null) {
            JOptionPane.showMessageDialog(this, "Ordem não encontrada!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String arquivo = PDFGenerator.gerarCotacao(ordem);
        
        if (arquivo != null) {
            JOptionPane.showMessageDialog(this, 
                "Cotação gerada com sucesso!\nArquivo salvo em: " + arquivo, 
                "Sucesso", 
                JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, 
                "Erro ao gerar cotação!", 
                "Erro", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void gerarFatura() {
        String codigo = jTextField1.getText().trim();
        
        if (codigo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Digite o código da ordem!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Ordem ordem = vendasService.buscarOrdem(codigo);
        
        if (ordem == null) {
            JOptionPane.showMessageDialog(this, "Ordem não encontrada!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String arquivo = PDFGenerator.gerarFatura(ordem);
        
        if (arquivo != null) {
            JOptionPane.showMessageDialog(this, 
                "Fatura gerada com sucesso!\nArquivo salvo em: " + arquivo, 
                "Sucesso", 
                JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, 
                "Erro ao gerar fatura!", 
                "Erro", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void buscarOrdem() {
        String codigo = jTextField1.getText().trim();
        
        if (codigo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Digite o ID da ordem!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Ordem ordem = vendasService.buscarOrdem(codigo);
        
        if (ordem != null) {
            ordemAtual = ordem;
            
            // Check if order is already processed
            if (ordem.getStatus() == Ordem.StatusOrdem.PAGO || ordem.getStatus() == Ordem.StatusOrdem.CANCELADO) {
                JOptionPane.showMessageDialog(this, 
                    "Esta ordem já foi processada e não pode ser editada!\n" +
                    "Status: " + ordem.getStatus(), 
                    "Aviso", 
                    JOptionPane.WARNING_MESSAGE);
                carregarOrdemNaTabela(ordem, false);
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Ordem encontrada!\n" +
                    "Código: " + ordem.getCodigo() + "\n" +
                    "Cliente: " + ordem.getClienteNome() + "\n" +
                    "Status: " + ordem.getStatus() + "\n" +
                    "Total: " + ordem.getValorTotal());
                carregarOrdemNaTabela(ordem, true);
            }
            
            // Load client info
            Cliente cliente = vendasService.buscar(ordem.getClienteId());
            if (cliente != null) {
                clienteSelecionado = cliente;
                jTextField2.setText(cliente.getNome() + " (ID: " + cliente.getId() + ")");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Ordem não encontrada!", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    private void carregarOrdemNaTabela(Ordem ordem, boolean editavel) {
        tableModel.setRowCount(0);
        itensOrdem.clear();
        
        for (ItemOrdem item : ordem.getItens()) {
            itensOrdem.add(item);
            Object[] row = {
                item.getProdutoId(),
                item.getProdutoDescricao(),
                item.getQuantidade(),
                item.getPrecoUnitario(),
                item.getSubtotal()
            };
            tableModel.addRow(row);
        }
        
        // Make table editable or not based on order status
        configurarTabelaEditavel(editavel);
    }
    
    private void configurarTabelaEditavel(boolean editavel) {
        if (editavel) {
            tableModel = new DefaultTableModel(
                new String[]{"ID Produto", "Nome Produto", "Quantidade", "Preço Unit.", "Subtotal"}, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    // Only quantity column is editable
                    return column == 2;
                }
            };
        } else {
            tableModel = new DefaultTableModel(
                new String[]{"ID Produto", "Nome Produto", "Quantidade", "Preço Unit.", "Subtotal"}, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
        }
        jTable1.setModel(tableModel);
        
        // Add listener for quantity changes
        if (editavel) {
            jTable1.getModel().addTableModelListener(e -> {
                if (e.getColumn() == 2) { // Quantity column
                    int row = e.getFirstRow();
                    try {
                        int novaQuantidade = Integer.parseInt(tableModel.getValueAt(row, 2).toString());
                        if (novaQuantidade > 0) {
                            ItemOrdem item = itensOrdem.get(row);
                            item.setQuantidade(novaQuantidade);
                            tableModel.setValueAt(item.getSubtotal(), row, 4);
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(this, "Quantidade inválida!", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                }
            });
        }
    }
    
    private void adicionarProduto() {
        String termo = JOptionPane.showInputDialog(this, "Digite o ID ou nome do produto:");
        
        if (termo == null || termo.trim().isEmpty()) {
            return;
        }
        
        List<Produto> produtos = stockService.buscarProduto(termo.trim());
        
        if (produtos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Produto não encontrado!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Produto produtoSelecionado;
        if (produtos.size() == 1) {
            produtoSelecionado = produtos.get(0);
        } else {
            // Multiple products found, let user choose
            String[] opcoes = new String[produtos.size()];
            for (int i = 0; i < produtos.size(); i++) {
                opcoes[i] = produtos.get(i).getCodigo() + " - " + produtos.get(i).getDescricao();
            }
            
            String escolha = (String) JOptionPane.showInputDialog(this, 
                "Múltiplos produtos encontrados. Selecione um:", 
                "Selecionar Produto",
                JOptionPane.QUESTION_MESSAGE, 
                null, 
                opcoes, 
                opcoes[0]);
            
            if (escolha == null) return;
            
            int index = java.util.Arrays.asList(opcoes).indexOf(escolha);
            produtoSelecionado = produtos.get(index);
        }
        
        // Ask for quantity
        String quantidadeStr = JOptionPane.showInputDialog(this, 
            "Digite a quantidade para " + produtoSelecionado.getDescricao() + ":");
        
        if (quantidadeStr == null || quantidadeStr.trim().isEmpty()) {
            return;
        }
        
        try {
            int quantidade = Integer.parseInt(quantidadeStr.trim());
            
            if (quantidade <= 0) {
                JOptionPane.showMessageDialog(this, "Quantidade deve ser maior que zero!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Check stock availability
            if (!stockService.verificarDisponibilidade(produtoSelecionado.getId(), quantidade)) {
                JOptionPane.showMessageDialog(this, 
                    "Quantidade insuficiente em estoque!\nDisponível: " + produtoSelecionado.getQuantidadeStock(), 
                    "Erro", 
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Create ItemOrdem
            ItemOrdem item = new ItemOrdem(
                produtoSelecionado.getId(),
                produtoSelecionado.getCodigo(),
                produtoSelecionado.getDescricao(),
                quantidade,
                produtoSelecionado.getPreco()
            );
            
            itensOrdem.add(item);
            
            Object[] row = {
                item.getProdutoId(),
                item.getProdutoDescricao(),
                item.getQuantidade(),
                item.getPrecoUnitario(),
                item.getSubtotal()
            };
            tableModel.addRow(row);
            
            JOptionPane.showMessageDialog(this, "Produto adicionado com sucesso!");
            
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Quantidade inválida!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void atualizarInformacoesUsuario() {
        jLabel1.setText("Sistema Online | Usuário: " + usuarioLogado.getNome() + " (" + usuarioLogado.getId() + ")");
    }
    
    private void configurarTabela() {
        String[] colunas = {"ID Produto", "Nome Produto", "Quantidade", "Preço Unit.", "Subtotal"};
        tableModel = new DefaultTableModel(colunas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Only quantity column is editable by default
                return column == 2;
            }
        };
        jTable1.setModel(tableModel);
        
        // Add table model listener for quantity changes
        jTable1.getModel().addTableModelListener(e -> {
            if (e.getColumn() == 2) { // Quantity column
                int row = e.getFirstRow();
                try {
                    int novaQuantidade = Integer.parseInt(tableModel.getValueAt(row, 2).toString());
                    if (novaQuantidade > 0 && row < itensOrdem.size()) {
                        ItemOrdem item = itensOrdem.get(row);
                        item.setQuantidade(novaQuantidade);
                        tableModel.setValueAt(item.getSubtotal(), row, 4);
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Quantidade inválida!", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        
        // Add double-click listener for product search in ID and Name columns
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    int column = jTable1.columnAtPoint(evt.getPoint());
                    if (column == 0 || column == 1) { // ID or Name column
                        adicionarProduto();
                    }
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
