/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Telas.stock;

import Controller.StockService;
import Model.Produto;
import Model.Usuario;
import Util.GeradorID;
import javax.swing.JOptionPane;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import java.util.List;

/**
 *
 * @author anicamassas
 */
public class TelaStockOpcoes extends javax.swing.JFrame {
    
    private Usuario usuarioLogado;
    private StockService stockService;
    private DefaultTableModel tableModel;
    private GeradorID geradorID;

    /**
     * Creates new form TelaStockOpcoes
     */
    public TelaStockOpcoes(Usuario usuario, StockService stockService) {
        this.usuarioLogado = usuario;
        this.stockService = stockService;
        this.geradorID = GeradorID.getInstance();
        initComponents();
        atualizarInformacoesUsuario();
        configurarTabela();
        carregarProdutos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setText("Sistema Online | Usuario:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nome", "Quantidade Atual"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
        }

        jButton1.setText("Cadastrar Produto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Gerenciar Produto");

        jButton3.setText("Entrada de Produtos");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Buscar Produto");

        jButton5.setText("Voltar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 110, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(17, 17, 17)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(30, 30, 30)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5)
                        .addGap(53, 53, 53)))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        cadastrarProduto();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        entradaProdutos();
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void cadastrarProduto() {
        String[] classes = {
            "Varao (VF)", 
            "Canalizacao (CAN)", 
            "Eletrico (ELE)", 
            "Barrote (BAR)", 
            "Prancha (PRA)", 
            "Prego (PRE)", 
            "Ferramentas (FER)", 
            "Cimento (CN)", 
            "Diversos (DIV)"
        };
        
        JComboBox<String> classeCombo = new JComboBox<>(classes);
        javax.swing.JTextField nomeField = new javax.swing.JTextField();
        javax.swing.JTextField descricaoField = new javax.swing.JTextField();
        javax.swing.JTextField precoField = new javax.swing.JTextField();
        javax.swing.JTextField quantidadeField = new javax.swing.JTextField();
        javax.swing.JTextField stockMinimoField = new javax.swing.JTextField();
        javax.swing.JTextField stockMaximoField = new javax.swing.JTextField();
        
        Object[] message = {
            "Classe de Produto:", classeCombo,
            "Nome:", nomeField,
            "Descrição:", descricaoField,
            "Preço:", precoField,
            "Quantidade Inicial:", quantidadeField,
            "Stock Mínimo:", stockMinimoField,
            "Stock Máximo:", stockMaximoField
        };
        
        int option = JOptionPane.showConfirmDialog(this, message, "Cadastrar Produto", JOptionPane.OK_CANCEL_OPTION);
        
        if (option == JOptionPane.OK_OPTION) {
            String nome = nomeField.getText().trim();
            String descricao = descricaoField.getText().trim();
            String precoStr = precoField.getText().trim();
            String quantidadeStr = quantidadeField.getText().trim();
            String stockMinimoStr = stockMinimoField.getText().trim();
            String stockMaximoStr = stockMaximoField.getText().trim();
            
            if (nome.isEmpty() || descricao.isEmpty() || precoStr.isEmpty() || 
                quantidadeStr.isEmpty() || stockMinimoStr.isEmpty() || stockMaximoStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Todos os campos são obrigatórios!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            try {
                double preco = Double.parseDouble(precoStr);
                int quantidade = Integer.parseInt(quantidadeStr);
                int stockMinimo = Integer.parseInt(stockMinimoStr);
                int stockMaximo = Integer.parseInt(stockMaximoStr);
                
                if (preco <= 0 || quantidade < 0 || stockMinimo < 0 || stockMaximo < 0) {
                    JOptionPane.showMessageDialog(this, "Valores inválidos!", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                if (stockMaximo < stockMinimo) {
                    JOptionPane.showMessageDialog(this, "Stock máximo deve ser maior que stock mínimo!", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                String classeSelecionada = (String) classeCombo.getSelectedItem();
                String prefixo = extrairPrefixo(classeSelecionada);
                String codigo = geradorID.gerarID(prefixo);
                
                Produto produto = new Produto(codigo, nome, preco, quantidade);
                produto.setStockMinimo(stockMinimo);
                produto.setStockMaximo(stockMaximo);
                produto.setCategoria(classeSelecionada);
                
                if (stockService.criar(produto)) {
                    JOptionPane.showMessageDialog(this, 
                        "Produto cadastrado com sucesso!\n" +
                        "Código: " + codigo + "\n" +
                        "Nome: " + nome + "\n" +
                        "Classe: " + classeSelecionada);
                    carregarProdutos();
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao cadastrar produto!", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Valores numéricos inválidos!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void entradaProdutos() {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um produto na tabela!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String codigo = (String) tableModel.getValueAt(selectedRow, 0);
        Produto produto = stockService.buscarPorCodigo(codigo);
        
        if (produto != null) {
            String quantidadeStr = JOptionPane.showInputDialog(this, 
                "Digite a quantidade a adicionar ao stock do produto " + produto.getDescricao() + ":", 
                "Entrada de Produtos", 
                JOptionPane.QUESTION_MESSAGE);
            
            if (quantidadeStr != null && !quantidadeStr.trim().isEmpty()) {
                try {
                    int quantidade = Integer.parseInt(quantidadeStr.trim());
                    
                    if (quantidade <= 0) {
                        JOptionPane.showMessageDialog(this, "Quantidade deve ser maior que zero!", "Erro", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    
                    if (stockService.aumentarStock(produto.getId(), quantidade)) {
                        JOptionPane.showMessageDialog(this, "Stock atualizado com sucesso!");
                        carregarProdutos();
                    } else {
                        JOptionPane.showMessageDialog(this, "Erro ao atualizar stock!", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Quantidade inválida!", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    
    private void atualizarInformacoesUsuario() {
        jLabel1.setText("Sistema Online | Usuário: " + usuarioLogado.getNome() + " (" + usuarioLogado.getId() + ")");
    }
    
    private void configurarTabela() {
        String[] colunas = {"Código", "Nome", "Quantidade Existente"};
        tableModel = new DefaultTableModel(colunas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        jTable1.setModel(tableModel);
    }
    
    private void carregarProdutos() {
        tableModel.setRowCount(0);
        List<Produto> produtos = stockService.listarTodos();
        for (Produto produto : produtos) {
            if (produto.isAtivo()) {
                Object[] row = {
                    produto.getCodigo(),
                    produto.getDescricao(),
                    produto.getQuantidadeStock()
                };
                tableModel.addRow(row);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
